#!/usr/bin/env python

import argparse
import getpass
import os
import sys
import subprocess
import re
import gettext
import six
import httplib
import httplib2
import json
import urllib
from nova.openstack.common import uuidutils
from wssh import client as wsshclient

class RestClient(object):
    def __init__(self):
        self.httpclient = httplib2.Http()
    
    def post(self, url, body, headers=None, extra_headers=False):
        return self.request('POST', url, extra_headers, headers, body)

    def get(self, url, headers=None, extra_headers=False):
        return self.request('GET', url, extra_headers, headers)

    def delete(self, url, headers=None, body=None, extra_headers=False):
        return self.request('DELETE', url, extra_headers, headers, body)

    def patch(self, url, body, headers=None, extra_headers=False):
        return self.request('PATCH', url, extra_headers, headers, body)

    def put(self, url, body, headers=None, extra_headers=False):
        return self.request('PUT', url, extra_headers, headers, body)

    def head(self, url, headers=None, extra_headers=False):
        return self.request('HEAD', url, extra_headers, headers)

    def copy(self, url, headers=None, extra_headers=False):
        return self.request('COPY', url, extra_headers, headers)
    
    def request(self, method, url, extra_headers=False,req_headers=None, req_body=None):
        resp, resp_body = self.httpclient.request(url,
                                                  method,
                                                  headers=req_headers,
                                                  body=req_body)
        return resp, resp_body

def getToken():
    username = os.getenv('OS_USERNAME', getpass.getuser())
    password = os.getenv('OS_PASSWORD', '')
    tenant = os.getenv('OS_TENANT_NAME', '')
    auth_url = os.getenv('OS_AUTH_URL', '')
    
    headers = {"Content-Type": "application/json"}
    passwordCredentials = {"username": username, "password": password}
    tenantName = 'admin'
    body = { 'auth': { 'tenantName': tenant, 'passwordCredentials': passwordCredentials} }
    
    client = RestClient()
    resp, resp_body = client.post(auth_url+'/tokens', json.dumps(body), headers)
    if resp.status == 200:
        return json.loads(resp_body)
    else:
        print resp.status
        resp_body = json.loads(resp_body)
        print resp_body['error']['message']
        sys.exit(1)

def getVmId(servurl, token, vmname):
    headers = {"Content-Type": "application/json",
               "X-Auth-Token": token
               }
    client = RestClient()
    resp, resp_body = client.get(servurl + '/servers' + '?' + 'name=%s' % vmname, headers)
    if resp.status == 200:
        vminfo = json.loads(resp_body)
        if len(vminfo['servers']) > 1:
            print "ERROR (CommandError): Multiple server matches found for '%s', use an ID to be more specific." % vmname
            sys.exit(1)
        if len(vminfo['servers']) == 0:
            print "ERROR (CommandError): None server matches found for '%s'." % vmname
            sys.exit(1)
        return vminfo['servers'][0]['id']
    else:
        print resp.status
        resp_body = json.loads(resp_body)
        print resp_body
        sys.exit(1)
    
    

def getSshConsole(servurl, token, vmid):
    headers = {"Content-Type": "application/json",
               "X-Auth-Token": token
               }
    body = { 'os-getSSHConsole': { "type": "wssh"}}
    
    client = RestClient()
    resp, resp_body = client.post(servurl + '/servers' + '/' + vmid + '/action', json.dumps(body), headers)
    if resp.status == 200:
        return json.loads(resp_body)
    else:
        print resp.status
        resp_body = json.loads(resp_body)
        print resp_body
        sys.exit(1)
    
def main():

    id_or_name = sys.argv[1]
    if id_or_name is None:
        print "Please input vm id or name."
        sys.exit(1)
    resp_body = getToken()
    #print resp_body
    token = resp_body['access']['token']['id']
    tenantid = resp_body['access']['token']['tenant']['id']
    
    servicecatalogs = resp_body['access']['serviceCatalog']
    for catalog in servicecatalogs:
        if catalog['name'] == 'nova':
            novaserviceurl = catalog['endpoints'][0]['publicURL']
            break
    if not uuidutils.is_uuid_like(id_or_name):
        vmid = getVmId(novaserviceurl, token, id_or_name)
    else:
        vmid = id_or_name
    resp_body = getSshConsole(novaserviceurl, token, vmid)
    #print resp_body
    
    wsshurl = resp_body['console']['url']
    wsshclient.invoke_shell(wsshurl)

if __name__ == main():
    main()





